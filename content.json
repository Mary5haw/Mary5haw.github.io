{"meta":{"title":"如烟's blog","subtitle":"","description":"","author":"如烟","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-11-09T07:27:52.213Z","updated":"2019-11-09T07:27:52.213Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"About","date":"2018-11-15T15:48:33.000Z","updated":"2019-11-10T02:24:52.656Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"一个生于2000年的前端攻城狮。 生活中总有那些有趣的人，长着平凡的面孔，内心却温柔善良。"},{"title":"Archives","date":"2017-03-20T12:49:56.000Z","updated":"2019-11-09T07:27:52.237Z","comments":false,"path":"archive/index.html","permalink":"http://yoursite.com/archive/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-03-20T12:49:56.000Z","updated":"2020-05-25T13:18:01.538Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-11-09T07:27:52.534Z","updated":"2019-11-09T07:27:52.534Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"TypeScript 知识点整理","slug":"20191111Typescript knowledge point arrangement","date":"2019-11-09T16:00:00.000Z","updated":"2019-11-10T01:57:47.005Z","comments":true,"path":"2019/11/10/20191111Typescript knowledge point arrangement/","link":"","permalink":"http://yoursite.com/2019/11/10/20191111Typescript%20knowledge%20point%20arrangement/","excerpt":"","text":"TypeScript 知识点整理学习笔记视频地址 https://www.bilibili.com/video/av38379328/?p=3 1. 数据类型定义未赋值，设置默认值定义数组定义枚举如果标识没有赋值 则它的值就是下标定义 void 类型，没有返回值定义 never 类型包括 null 和 undefined 类型，是其他类型的子类型，代表从不会出现的值。用 never 声明的变量只能用 never 类型的值所赋值。 2. 函数可选参数必须定义在参数最后一个剩余参数三点运算符函数重载这时候 fun 方法 就有2个参数，重载不会覆盖 3. 类实例方法和静态方法以 jquery 为例：ts 中静态方法：多态父类定义一个方法不去实现，让继承它的子类去实现，每个子类有不同的表现。抽象类它提供其他类继承的基类，不能直接实例化。用 abstract 关键字定义抽象类和抽象方法。可以说抽象类和抽象方法使用来定义标准。抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 4. 接口行为和动作的规范，对批量方法进行约束。属性类型接口函数类型接口可索引接口 （约束数组、对象）类类型接口implements 实现后面的接口。接口拓展接口继承其他接口。 5. 泛型简单理解：泛型就是解决类、接口和方法的复用性，以及对不特定数据类型的支持。可以使用泛型来创建可重用的组件，一个组件支持多种类型的数据。5.1 泛型函数普通写法：使用泛型：由于如果使用 any 可能出现可以传入 string 返回 number ，所以需要使用泛型，使得传入参数和返回类型参数一致。T 表示泛型，具体什么类型是调用这个方法的时候决定的。5.2 泛型类5.3 泛型接口方法1：方法2：5.4 把类作为参数类型的泛型类以前将类作为参数类型，可以检查参数是否类型符合把类作为参数类型的泛型类 6. 模块export 暴露模块， import 导入模块。方式1方式2方式3 默认导出 7. 命名空间在模块内部，用于组织代码，避免命名冲突。使用 namespace 关键字作为划分，将指定的代码放到命名空间中，并使用 export 暴露其中变量和方法（类似将命名空间当做模块），调用的时候，需要使用 空间名称 来获取对应变量方法。 8. 装饰器是一种特殊类型的声明，能够被附加到类生命，方法，属性或参数上，可以修改类的行为。常见：类装饰器，属性装饰器，方法装饰器，参数装饰器。装饰器写法：普通装饰器（无法传参），装饰器工厂（可传参）8.1 普通装饰器（无法传参）8.2 装饰器工厂（可传参）8.3 重载构造函数用来修改当前类的构造函数，属性和方法。8.4 属性装饰器8.5 方法装饰器用来监视、修改或替换方法的定义。方法装饰会在运行时，传入三个参数：对于静态方法来说是类的构造函数，对于实例方法是类的原型对象。方法的名称。方法的属性描述符。8.6 方法参数装饰器方法参数装饰器表达式会在运行时当做函数被调用，可以使用参数装饰器为类的原型添加一些元素数据。方法装饰会在运行时，也是传入三个参数，和方法装饰器一样。8.7 装饰器执行顺序属性装饰器 - 方法装饰器 - 方法参数装饰器 - 类装饰器多个相同类型装饰器，会从下开始执行，比如：则先执行装饰器 fun2 再执行装饰器 fun1 。","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"node框架Nest.js入门操作","slug":"20191108Nestjs","date":"2019-11-07T16:00:00.000Z","updated":"2019-11-10T01:54:29.376Z","comments":true,"path":"2019/11/08/20191108Nestjs/","link":"","permalink":"http://yoursite.com/2019/11/08/20191108Nestjs/","excerpt":"","text":"命令12345678910111213141516171819202122232425262728​&#x2F;&#x2F;创建一个名字为admin的子项目nest g app admin&#x2F;&#x2F;子项目中创建一个模块&#x2F;&#x2F;mo 是models创建admin下面的usersnest g mo -p admin users&#x2F;&#x2F;mo 是controller创建admin下面的usersnest g co -p admin users&#x2F;&#x2F;启动子项目admin的监听模式nest start -w admin&#x2F;&#x2F;新建所有子项目的公共库nest g lib db&#x2F;&#x2F;建议将名字设置为libs&#x2F;&#x2F;连接数据库包安装npm i nestjs-typegoose @typegoose&#x2F;typegoose&#x2F;&#x2F;安装mongoose和相应types的提示npm i mongoose @types&#x2F;mongoose&#x2F;&#x2F;引入crud&#x3D;&gt;一行代码实现增删改查npm i nestjs-mongoose-crud&#x2F;&#x2F;安装swagger文档管理包npm i @nestjs&#x2F;swagger swagger-ui-express 工具类Vscode 编辑器代码块插件Vscode NestJs Snippetsgithub地址：https://github.com/ashinzekene/vscode-nestjs-snippets学习材料入门级学习文档https://github.com/dzzzzzy/Nestjs-Learning/blob/master/docs/provider.md相关材料大全https://docs.nestjs.cn/6/awesome 基本要想理解nestjs的源码先要理解和掌握以下知识:ES6的proxy，reflectTypeScript的decoratorinversion of control (IoC)的基本概念一定TypeScript基础.如何通过decorator和元数据实现依赖注入container类: 用于存储所有模块scanner类: 递归提取出所有模块并存储到容器中; 提取出模块间的关联关系和模块自身的各种类以及内部联系，并存储到模块中;module类: 存储自身的关联模块、组件、可注入类、控制器类injector类: 依赖注入的核心环节, 在所有模块的内容和关系都被扫描出后, 来创建实例,instanceLoader类: 使用Injector来加载模块的各种实例, 这个过程很复杂, 伴随递归和各种判断","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"Vscode中使用Es-lint终极配置大全","slug":"20191008EslintInVscode","date":"2019-10-07T16:00:00.000Z","updated":"2019-11-10T01:54:21.054Z","comments":true,"path":"2019/10/08/20191008EslintInVscode/","link":"","permalink":"http://yoursite.com/2019/10/08/20191008EslintInVscode/","excerpt":"","text":"在 vue项目中使用vscode编辑时，使用了如下这套配置，保存时就会根据既定vue项目中.eslintrc.js文件设置的既定规则自动校验并依据规则修复代码。 需安装插件主要是这两个插件：ESLintPrettier - Code formatter vscode中setting.json中配置123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &#x2F;&#x2F; vscode默认启用了根据文件类型自动设置tabsize的选项 &quot;editor.detectIndentation&quot;: false, &#x2F;&#x2F; 重新设定tabsize &quot;editor.tabSize&quot;: 2, &#x2F;&#x2F; #每次保存的时候自动格式化 &quot;editor.formatOnSave&quot;: true, &#x2F;&#x2F; #每次保存的时候将代码按eslint格式进行修复 &quot;eslint.autoFixOnSave&quot;: true, &#x2F;&#x2F; 添加 vue 支持 &quot;eslint.validate&quot;: [ &quot;javascript&quot;, &quot;javascriptreact&quot;, &#123; &quot;language&quot;: &quot;vue&quot;, &quot;autoFix&quot;: true &#125; ], &#x2F;&#x2F; #让prettier使用eslint的代码格式进行校验 &quot;prettier.eslintIntegration&quot;: true, &#x2F;&#x2F; #去掉代码结尾的分号 &quot;prettier.semi&quot;: false, &#x2F;&#x2F; #使用带引号替代双引号 &quot;prettier.singleQuote&quot;: true, &#x2F;&#x2F; #让函数(名)和后面的括号之间加个空格 &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true, &#x2F;&#x2F; #这个按用户自身习惯选择 &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;, &#x2F;&#x2F; #让vue中的js按编辑器自带的ts格式进行格式化 &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;, &quot;vetur.format.defaultFormatterOptions&quot;: &#123; &quot;js-beautify-html&quot;: &#123; &quot;wrap_attributes&quot;: &quot;force-aligned&quot; &#x2F;&#x2F; #vue组件中html代码格式化样式 &#125; &#125;, &#x2F;&#x2F; 格式化stylus, 需安装Manta&#39;s Stylus Supremacy插件 &quot;stylusSupremacy.insertColons&quot;: false, &#x2F;&#x2F; 是否插入冒号 &quot;stylusSupremacy.insertSemicolons&quot;: false, &#x2F;&#x2F; 是否插入分好 &quot;stylusSupremacy.insertBraces&quot;: false, &#x2F;&#x2F; 是否插入大括号 &quot;stylusSupremacy.insertNewLineAroundImports&quot;: false, &#x2F;&#x2F; import之后是否换行 &quot;stylusSupremacy.insertNewLineAroundBlocks&quot;: false, &quot;window.zoomLevel&quot;: 0 &#x2F;&#x2F; 两个选择器中是否换行&#125; vue项目中.eslintrc.js文件常用个性化配置 123456789101112131415161718192021222324252627282930313233&#x2F;&#x2F; https:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;user-guide&#x2F;configuringmodule.exports &#x3D; &#123; root: false, parserOptions: &#123; parser: &#39;babel-eslint&#39; &#125;, env: &#123; browser: true &#125;, extends: [ &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;eslint-plugin-vue#priority-a-essential-error-prevention &#x2F;&#x2F; consider switching to &#96;plugin:vue&#x2F;strongly-recommended&#96; or &#96;plugin:vue&#x2F;recommended&#96; for stricter rules. &#39;plugin:vue&#x2F;essential&#39;, &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;standard&#x2F;standard&#x2F;blob&#x2F;master&#x2F;docs&#x2F;RULES-en.md &#39;standard&#39; ], &#x2F;&#x2F; required to lint *.vue files plugins: [&#39;vue&#39;], &#x2F;&#x2F; add your custom rules here rules: &#123; &#x2F;&#x2F; allow async-await &#39;generator-star-spacing&#39;: &#39;off&#39;, &#x2F;&#x2F; allow debugger during development &#39;no-debugger&#39;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39; ? &#39;error&#39; : &#39;off&#39;, eqeqeq: &#39;off&#39;, &#x2F;&#x2F; 不能始用&#x3D;&#x3D; &#39;no-unused-vars&#39;: &#39;off&#39;, &#x2F;&#x2F; 消除未使用的变量 &#39;no-undef&#39;: &#39;off&#39;, &#x2F;&#x2F; 未使用变量报错 &#39;no-unreachable&#39;: &#39;off&#39; &#x2F;&#x2F; 不能执行的代码检测 &#x2F;&#x2F;此处一下还可以根据个人习惯设置更多个性化内容 &#125;&#125;","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"ES10 知识点整理","slug":"20190811ES10","date":"2019-08-10T16:00:00.000Z","updated":"2019-11-10T02:20:55.311Z","comments":true,"path":"2019/08/11/20190811ES10/","link":"","permalink":"http://yoursite.com/2019/08/11/20190811ES10/","excerpt":"","text":"1. 可选的 catch 绑定1.1 介绍在 ECMAScript2019 最新提案中，支持我们在使用 try catch 错误异常处理时，选择性的给 catch 传入参数。即我们可以不传入 catch 参数。正常使用 try catch： 12345try &#123; &#x2F;&#x2F; todo &#125; catch (err)&#123; console.log(&#39;err：&#39;,err)&#125; 在 ES10 中可以这么使用： 12345try &#123; &#x2F;&#x2F; todo &#125; catch &#123; &#x2F;&#x2F; todo &#125; 1.2 使用场景当我们不需要对 chtch 返回的错误信息进行处理时，比如：我们对于一些数据处理，经常会出现格式报错，但是我们并不关心这个错误，我们只需要继续处理，或重新请求数据等。这种情况，我们就可以使用这个新特性，当然，还是需要根据实际情况考虑。 2. JSON.superset2.1 介绍来源背景：由于在 ES2019 之前不支持转义行分隔符 (\\u2028) 和段落分隔符 (\\u2029) 字符，并且在解析过程中会报错: SyntaxError: Invalid or unexpected token。 12const LS &#x3D; &quot;&quot;;const PS &#x3D; eval(&quot;&#39;\\u2029&#39;&quot;);&#x2F;&#x2F; SyntaxError: Invalid or unexpected token 解决方案：JSON 语法由 ECMA-404 定义并由 RFC 7159 永久修复，允许行分隔符 (\\u2028) 和段落分隔符 (\\u2029) 字符，直接出现在字符串中。2.2 使用在 ES10 中，我们就可以直接使用 eval(“‘\\u2029’”); 而不会再提示错误。 3. Symbol.prototype.description3.1 介绍在 ES6 中引入 Symbol 这个基本数据类型，可以实现一些数据内省等高级功能。这次 ES10 中，为 Symbol 类型增加 Symbol.prototype.description 的一个访问器属性，用来获取 Symbol 类型数据的描述信息（description）。3.2 使用MDN 上的案例介绍： 1234567891011 console.log(Symbol(&#39;mytest&#39;).description); &#x2F;&#x2F; expected output: &quot;mytest&quot; console.log(Symbol.iterator.description); &#x2F;&#x2F; expected output: &quot;Symbol.iterator&quot; console.log(Symbol.for(&#39;leo&#39;).description); &#x2F;&#x2F; expected output: &quot;leo&quot; console.log(Symbol(&#39;mytest&#39;).description + &#39; and leo!&#39;);&#x2F;&#x2F; expected output: &quot;mytest and leo!&quot; 另外我们也可以这么使用： 12let pingan &#x3D; Symbol(&#39;mytest&#39;).description;console.log(pingan &#x3D;&#x3D;&#x3D; &#39;mytest&#39;); &#x2F;&#x2F; true 4. Function.prototype.toString4.1 介绍在 ES10 之前，我们对一个函数调用 toString() 方法，返回的结果中会将注释信息去除。在 ES10 之后，函数再调用 toString() 方法，将准确返回原有内容，包括空格和注释等： 1234567891011 let mytest &#x3D; function()&#123; &#x2F;&#x2F; do something console.log(&#39;leo&#39;) &#125; mytest.toString(); &#x2F;** &quot;function()&#123; &#x2F;&#x2F; do something console.log(&#39;leo&#39;)&#125;&quot;*&#x2F; 5. Object.fromEntries5.1 介绍Object.fromEntries 是 ES10 中新的静态方法，用于将键值对列表转换为对象。Object.fromEntries() 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现 @iterator 方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。Object.fromEntries() 是 Object.entries 的反转。5.2 使用Object.entries 和 Object.fromEntries() 互转 123456let leo &#x3D; &#123; name: &#39;mytest&#39;, age: 10&#125;;let arr &#x3D; Object.entries(leo);console.log(arr);&#x2F;&#x2F; [[&quot;name&quot;, &quot;mytest&quot;],[&quot;age&quot;, 10]]let obj &#x3D; Object.fromEntries(arr);console.log(obj);&#x2F;&#x2F; &#123;name: &quot;mytest&quot;, age: 10&#125; Map 转化为 Object 123const map &#x3D; new Map([ [&#39;name&#39;, &#39;mytest&#39;], [&#39;age&#39;, 10] ]);const obj &#x3D; Object.fromEntries(map);console.log(obj); &#x2F;&#x2F; &#123;name: &quot;mytest&quot;, age: 10&#125; Array 转化为 Object 123const arr &#x3D; [ [&#39;name&#39;, &#39;mytest&#39;], [&#39;age&#39;, 10] ];const obj &#x3D; Object.fromEntries(arr);console.log(obj); &#x2F;&#x2F; &#123;name: &quot;mytest&quot;, age: 10&#125; 6. 更友好的 JSON.stringify6.1 介绍更友好的 JSON.stringify，对于一些超出范围的 Unicode 字符串，为其输出转义序列，使其成为有效 Unicode 字符串。6.2 使用 1234567891011 &#x2F;&#x2F; Non-BMP characters still serialize to surrogate pairs. JSON.stringify(&#39;𝌆&#39;) &#x2F;&#x2F; → &#39;&quot;𝌆&quot;&#39; JSON.stringify(&#39;\\uD834\\uDF06&#39;) &#x2F;&#x2F; → &#39;&quot;𝌆&quot;&#39; &#x2F;&#x2F; Unpaired surrogate code units will serialize to escape sequences. JSON.stringify(&#39;\\uDF06\\uD834&#39;) &#x2F;&#x2F; → &#39;&quot;\\\\udf06\\\\ud834&quot;&#39;JSON.stringify(&#39;\\uDEAD&#39;)&#x2F;&#x2F; → &#39;&quot;\\\\udead&quot;&#39; 7. String.prototype.{trimStart,trimEnd}7.1 String.prototype.trimStarttrimStart() 方法从字符串的开头删除空格，返回一个新字符串，表示从其开头（左端）剥离空格的调用字符串，不会直接修改原字符串本身。trimLeft()是此方法的别名。 123456let mytest &#x3D; &#39; Hello mytest! &#39;;console.log(mytest); &#x2F;&#x2F; &quot; Hello mytest! &quot;;console.log(mytest.length); &#x2F;&#x2F; 23;console.log(mytest.trimStart()); &#x2F;&#x2F; &quot;Hello mytest! &quot;;console.log(mytest.trimStart().length); &#x2F;&#x2F; 20; 7.2 String.prototype.trimEndtrimEnd() 方法从一个字符串的右端移除空白字符，返回一个新字符串，表示从其（右）端剥去空白的调用字符串，不会直接修改原字符串本身。trimRight()是此方法的别名。 123456let mytest &#x3D; &#39; Hello mytest! &#39;;console.log(mytest); &#x2F;&#x2F; &quot; Hello mytest! &quot;;console.log(mytest.length); &#x2F;&#x2F; 23;console.log(mytest.trimEnd()); &#x2F;&#x2F; &quot; Hello mytest!&quot;;console.log(mytest.trimEnd().length); &#x2F;&#x2F; 20; 8. Array.prototype.{flat,flatMap}在 ES10 之前，我们要将一个数组打平，由于官方没有对应 API，我们可能需要 lodash活着手写循环去操作。8.1 Array.prototype.flat在 ES10 中，官方新增一个 Array.prototype.flat 方法，将数组第一层数据打平，也仅限第一层。如果我们需要将多层递归，则需要显式传入参数： 12[1,2,3,[1,2,[3, [4]]]].flat(2);&#x2F;&#x2F; [1, 2, 3, 1, 2, 3, [4]] 8.2 Array.prototype.flatMap在 ES10 中，官方还增加了 Array.prototype.flatMap 方法，其实就是 flat 和 map 一起组合操作： 123[1,3,5].map(x &#x3D;&gt; [x * x]); &#x2F;&#x2F; [[1],[9],[25]][1,3,5].flatMap(x &#x3D;&gt; [x * x]); &#x2F;&#x2F; [1,9,25]","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"}]}],"categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"}]}